- hosts: base_machines
  become: yes
  become_method: sudo
  vars_files:
    - secure.yml
    - containers.yml
    
  roles:
    - update-accounts
  tasks:
    - name: Set up shared directory for base machine
      file:
        path: "/home/shared"
        state: directory
        recurse: yes
        owner: "root"
        group: "fileshare"
        mode: 2775
    - name: Copy compose directory
      copy: src="files/reservoir" dest="/" force=yes
    - name: Copy memory limit script
      copy:
        src: files/reservoir/make_user_mem_limit_files.py
        dest: /
        owner: root
        group: root
        mode: 0700

    - name: Copy sshd config
      copy:
        src: files/reservoir_host_keys     
        dest: /
        mode: 0700

    - name: make scripts directory on host
      file:
        path: /root/scripts
        state: directory
        mode: '0755'
     
    - name: copy scripts to host
      copy:
        src: "./scripts/{{ item }}"
        dest: /root/scripts
        mode: '0755'
      become: yes
      loop:
        - "install_container_toolkit.sh"
    - name: create symlink
      file:
        src: /usr/lib/x86_64-linux-gnu/libOpenCL.so.1
        dest: /usr/lib/libOpenCL.so
        state: link
    - name: Start services
      docker_compose:
        project_src: "/reservoir/"
        pull: true
        recreate: always
        restarted: yes
        files:
          - "docker-compose-{{ inventory_hostname }}.yml"
      environment:
        NGINX_HOSTNAME: "{{inventory_hostname}}"
        HOSTNAME: "{{reservoir_hostname}}"
        # RESERVOIR_IMAGE: "{{reservoir_image | default('ghcr.io/ecohealthalliance/reservoir:base')}}"
        controller_image: "{{controller_image | default('ghcr.io/ecohealthalliance/slurm_reservoir:controller-gpu')}}"
        worker_image: "{{worker_image | default('ghcr.io/ecohealthalliance/slurm_reservoir:worker-gpu')}}"
        RESERVOIR_USER_PASSWORD: "{{reservoir_user_password}}"
        RUNTIME: "{{machine_runtime | default('runc')}}"
        CONTAINER_MEM_LIMIT: "{{container_mem_limit}}"
    - pause:
        seconds: 40
    - name: Ensure reservoir_host_keys has correct permissions set
      file:
        path: /reservoir_host_keys
        mode: '600'
    # Mounting the full ssh directory makes it so some things can't be updated in the base image, so
    # instead a new directory is created and the configuration is updated to point to that.
   # New tasks for SSH host keys and SSHD configuration
      
         

    - name: Copy SSH public key to {{ item }}
      command: docker cp /reservoir_host_keys/ansible_ssh_key.pub {{ item }}:/tmp/ansible_ssh_key.pub
      loop: "{{ slurm_containers }}"

    - name: Append SSH public key to authorized_keys in {{ item }}
      command: docker exec {{ item }} bash -c "cat /tmp/ansible_ssh_key.pub >> /home/ansible/.ssh/authorized_keys"
      loop: "{{ slurm_containers }}"
 



    - name: Copy SSH host keys into {{ item[0] }} container
      command: docker cp /reservoir_host_keys/{{ item[1] }} {{ item[0] }}:/etc/ssh/host_keys/
      loop: "{{ slurm_containers | product(['ssh_host_rsa_key', 'ssh_host_ecdsa_key', 'ssh_host_ed25519_key']) | list }}"



    - name: Ensure reservoir host SSH keys in container have correct permissions
      command: docker exec {{ item[0] }} chmod 600 /etc/ssh/host_keys/{{ item[1] }}
      with_nested:
        - "{{ slurm_containers }}"
        - [ "ssh_host_rsa_key", "ssh_host_ecdsa_key", "ssh_host_ed25519_key" ]



    - name: Update and restart SSH service in containers
      block:
        - name: Update SSH configuration in {{ item }}
          command: docker exec -it {{ item }} sed -i -E 's@^#HostKey /etc/ssh/(.+)$@HostKey /etc/ssh/host_keys/\1@g' /etc/ssh/sshd_config
          loop: "{{ slurm_containers }}"
  
        - name: Restart each container so config changes take effect
          command: docker restart {{ item }}
          loop: "{{ slurm_containers }}"


        - name: Copy memory limit script to containers
          block:
           - name: Copy memory limit script to {{ item }}
             command: docker cp /make_user_mem_limit_files.py {{ item }}:/
             loop: "{{ slurm_containers }}"





- hosts: docker_containers
  become: yes
  become_method: sudo
  roles:
    - update-accounts
  tasks:
    - name: Create gurobi dir
      file: path=/opt/gurobi810 state=directory
    - name: Create gurobi license
      copy:
        content: |
          PASSWORD={{gurobi_password}}
          TOKENSERVER=aegypti.ecohealthalliance.org
          PORT=60954
        dest: "/opt/gurobi810/gurobi.lic"
    - name: Run script to create systemd memory limit files in each container
      command: docker exec -it {{ item }} /make_user_mem_limit_files.py
      loop: "{{ slurm_containers }}"

  vars_files:
    - secure.yml
    - containers.yml
    
